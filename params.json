{"name":"Introduction node.js","tagline":"","body":"Little tutorial to install and example of use node.js based on the tutorial of the officia page(see fonts section)\r\n\r\n##Introduction\r\nNode.js is an open source, cross-platform runtime environment for server-side and networking\r\napplications. Node.js applications are written in JavaScript, and can be run within the Node.js \r\nruntime on OS X, Microsoft Windows, Linux, FreeBSD, and IBM i.\r\n\r\nNode.js provides an event-driven architecture and a non-blocking I/O API that optimizes an \r\napplication's throughput and scalability. These technologies are commonly used for real-time \r\nweb applications.\r\n\r\nNode.js uses the Google V8 JavaScript engine to execute code, and a large percentage of the basic \r\nmodules are written in JavaScript. Node.js contains a built-in library to allow applications to \r\nact as a Web server without software such as Apache HTTP Server or IIS\r\n\r\n##Fonts\r\n* Font http://es.wikipedia.org/wiki/Node.js (introduction)\r\n* Font http://nodejs.org/ (examples)\r\n* Font Manual node in command man. (develop tutorial)\r\n\r\n##Instalation\r\n1-First run  http://nodejs.org/  \r\n2-Push install:  \r\n![Imagen 1][1] \r\n\r\n [1]: https://github.com/ctc87/Introduction_Node.js/blob/master/img/hello.png \"Install icon\"\r\n [2]: https://github.com/ctc87/Introduction_Node.js/blob/master/img/hello.png \"example1\"  \r\n [3]: https://github.com/ctc87/Introduction_Node.js/blob/master/img/echopetition.png \"example2\"\r\n \r\n3-When the file is downloaded open shell and put the following commands:  \r\n  To decompress:  \r\n      `$ tar xzvf node-v0.10.36.tar.gz`  \r\n  To install:  \r\n      `$ cd node-v0.10.36`  \r\n      `$ sudo make`\r\n      `$ sudo make install`  \r\n      `$ sudo ./configure`  \r\n  Delete temporary stuff:  \r\n      `$ cd ..` \r\n      `$ rm -rf node-v0.10.36.tar.gz node-v0.10.36`  \r\nWe have now installed node.js\r\n\r\n##Ejamples of use\r\nThis simple web server written in Node responds with \"Hello World\" for every request.  \r\n```\r\nvar http = require('http');  \r\nhttp.createServer(function (req, res) {  \r\n  res.writeHead(200, {'Content-Type': 'text/plain'});  \r\n  res.end('Hello World\\n');  \r\n}).listen(1337, '127.0.0.1');  \r\nconsole.log('Server running at http://127.0.0.1:1337/');  \r\n```  \r\nTo run the server, put the code into a file example.js and execute it with the node program from the command line.     \r\n`$ node example.js`  \r\nServer running at http://127.0.0.1:1337/  \r\n\r\nAnd you can see in http://127.0.0.1:1337/  \r\n![Imagen 2][2]\r\n\r\nHere is an example of a simple TCP server which listens on port 1337 and echoes whatever you send it:  \r\n`$ node`\r\n\r\nAnd write:  \r\n\r\n```\r\n>var net = require('net');\r\n\r\n>var server = net.createServer(function (socket) {\r\n  socket.write('Echo server\\r\\n');\r\n  socket.pipe(socket);\r\n});\r\n\r\n>server.listen(1337, '127.0.0.1');\r\n```  \r\n\r\nThen you can see the petition of the browser, in http://127.0.0.1:1337/  \r\n![Imagen 3][3]  \r\nyou can change server configuration inline with command node. This produces a  \r\nloop where the code are written and executed in real time.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}